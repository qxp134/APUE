第一章 UNIX基础知识 代码cap1
1.1
    操作系统为运行在其上的应用程序提供服务
1.2
     操作系统定义为一种软件，控制计算机硬件资源，提供运行环境，这种软件称为内核
     内核接口----->系统调用
1.3
    登陆
    shell
1.4 文件和目录
    书中myls.c 实现了ls  需要用cc、gcc编不过 要用-L /usr/local/lib/ -lapue 链接到libapue
1.5 输入和输出
    1.文件描述符 内核标记一个进程正在访问的文件 类似具柄，socket套接字，不知道翻译的是什么鬼
    2.标准输入，输出，错误 一般都定位到终端
      < 标准输出重定位 
      > 标准输入重定位
    3.不带缓存的I/O read write open 例子：mycopy1.c 复制标准输入到标准输出
    4.标准I/O 带缓冲的函数接口 fget 例子：mycopy2.c
1.6 进程⭐️
    1.程序的实例 进程ID getpid.c
    2.进程控制 fork waitpid exec procontrol.c
1.7
    出错处理 返回一个errno 通常 < 0 可以通过C标准提供的函数 strerror perror 获取错误信息
1.8
    用户id 组id 每个文件都存了这两个值 需要4个字节
1.9 信号⭐️
    用于通知进程发生了某种情况 可以使用signal函数捕捉信号后自行处理 capsig.c

第二章 各种标准，看不懂

第三章 文件I/O 
3.1 
    不带缓冲的I/O open read write lseek close
    进程共享文件 内核数据结构 dup fcntl sync fsync ioctl 
3.2 文件描述符
    是一个非负整数
    open creat时，内核将文件描述符返回给进程
    0：标准输入 1：标准输出 2：标准错误
3.3 open openat
    #include <fcntl.h>
    int open(const char *path, int oflag, .../mode/)
    int openat(int fd, const char *path, int oflag, .../mode/)
    path表示路径，若为绝对路径那 open openat相同 若是相对路径 openat 顾名思义 从fd这个文件描述符所在目录去找path
    int oflag 参数有很多规定的值，记几个常用的值就好
    O_RDONLY 只读
    O_WRONLY 只写
    O_RDWR 读写
    O_EXEC 只执行
    O_SERACE 只搜索，用于目录
3.4 creat
int creat(const char*path,mode_t mode)
相当于 open(path,O_WRONLY|O_CREAT|O_TRUNC,mode)
3.5 close
#include <unistd.h>
int close(int fd);
3.6 lseek
设置文件偏移量
#include <unistd.h>
off_t lseek(int fd,off_t offset, int whence);
深信服面试时，问到像ls一样瞬间知道文件大小，既可以用这个函数
若 whence 是 SEEK_SET 偏移量从头开始 加offset个
若 whence 是 SEEK_CUR 偏移量从当前值开始
若 whence 是 SEEK_END 偏移量从尾 offset 可正可负
3.7 read
#include <unistd.h>
ssize_t read(int fd, void *buf, size_t nbytes);
读到末尾返回0，还有30个字节，要求读100个字节，返回30。再读返回0。

3.8 write
#include <unistd.h>
ssize_t write(int fd, const void *buf, size_t nbytes);

3.9 I/O效率